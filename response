//-----------------------------------------------------------기본함수------------------------------------------------//
//절전모드 관리
wake=(function() { 
   var PM=android.os.PowerManager;
   var pm =Api.getContext().getSystemService(android.content.Context.POWER_SERVICE);
   var wl= pm.newWakeLock(PM.SCREEN_DIM_WAKE_LOCK|PM.ACQUIRE_CAUSES_WAKEUP |PM.ON_AFTER_RELEASE,"FAIL");
    return {
        on :function(){
            if(!wl.isHeld()){
                wl.acquire();
                return "wake on done";
            }else return "not changed";
        },
        off:function(){
            if(wl.isHeld()){
                wl.release();
                return "wake off done";
            }else return "not changed";
        },
        toString: function(){
            return wl.toString();
        }
    }
})();

//한글받침 관리
String.prototype.받침=function(){
    var lastCharCode=this.toString().charCodeAt(this.toString().length-1);
    if(lastCharCode>="가".charCodeAt(0) && lastCharCode<="힣".charCodeAt(0)){
        if((lastCharCode-"가".charCodeAt(0))%28==0) return false;
        else return true;
    }else return false;
   
}
String.prototype.은는=function(){
    return this.toString().받침() ? this.toString()+"은" : this.toString()+"는"; 
}
String.prototype.이가=function(){
    return this.toString().받침() ? this.toString()+"이" : this.toString()+"가"; 
}
String.prototype.과와=function(){
    return this.toString().받침() ? this.toString()+"과" : this.toString()+"와"; 
}
String.prototype.을를=function(){
    return this.toString().받침() ? this.toString()+"을" : this.toString()+"를"; 
}
String.prototype.조사=function(받침있음, 받침없음){
    return this.toString().받침() ? this.toString()+받침있음 : this.toString()+받침없음;
}

//한글인코딩
String.prototype.encoding=function(){
    var res=this.toString();
    var tmp;
    while(tmp=/\\u[\da-fA-F]{4}/.exec(res)){
        res=res.replace(tmp[0],String.fromCharCode(parseInt(tmp[0].substring(2),16)));
    }
   
    return res;
}

//파일입출력
function saveFile() {//github에서 코드불러오기
    file = "storage/emulated/0/kbot/response.js";
    //https://raw.githubusercontent.com/sjh7711/bot/05f942ca2d2e1705281f203bf42cc885dd4b758b/response;
    conn=new java.net.URL("https://raw.githubusercontent.com/sjh7711/bot/master/response").openConnection();
    br = new java.io.BufferedReader(new java.io.InputStreamReader(conn.getInputStream()));
    str = "";
    tmp = null;
    while ((tmp = br.readLine()) != null) {
        str += tmp + "\n";
    }
    var filedir = new java.io.File(file);
    try {
        var bw = new java.io.BufferedWriter(new java.io.FileWriter(filedir));
        bw.write(str.toString());
        bw.close();
    }
    catch (e) {
        return e;
    }
}

//sort에 필요한 compare
function compare(a, b) {
    return a - b;
}

//기능설명
function func(r) {
    if (r.msg.split(" ")[1] == "최근채팅") {
        r.replier.reply("최근채팅 6개를 출력합니다. !최근채팅 16 와 같이하면 16개를 불러오고 최대 16개까지 조회가능합니다.");
    }
    if (r.msg.split(" ")[1] == "오버워치") {
        r.replier.reply("!오버워치 똥개#5468와 같이 입력하면 티어,점수,경쟁전 모스트 3까지 보여줍니다.\n배치를 치지 않은 경우, 프로필이 비공개인 경우, 배틀태그를 입력하지 않은 경우, 대소문자를 정확하게 구분하지 않은 경우엔 정보를 알 수 없습니다.");
    }
    if (r.msg.split(" ")[1] == "로또") {
        r.replier.reply("로또번호를 추천해줍니다.");
    }
    if (r.msg.split(" ")[1] == "메뉴추천") {
        r.replier.reply("먹을 음식을 추천해 줍니다. !메뉴추천 3과 같이 입력하면 메뉴를 3개 추천해줍니다. 최대 8개를 추천해줍니다.");
    }
    if (r.msg.split(" ")[1] == "메뉴추가") {
        r.replier.reply("추가되었으면하는 음식을 추천해주세요. 4명의 합의가 있으면 바로 추가 될 수 있습니다. ex)!메뉴추가 냉장고");
    }
    if (r.msg.split(" ")[1] == "음식점추천") {
        r.replier.reply("시립대 주변 음식점을 추천해 줍니다. !음식점추천 3과 같이 입력하면 음식점를 3개 추천해줍니다. 최대 8개를 추천해줍니다.");
    }
    if (r.msg.split(" ")[1] == "음식점추가") {
        r.replier.reply("추가되었으면하는 음식점을 추천해주세요. 4명의 합의가 있으면 바로 추가 될 수 있습니다. ex)!음식점추가 789비어");
    }
}
//-------------------------------------------------------변수----------------------------------------------------------//
var D = require("DBManager.js")("D");
//menu:메뉴/res:음식점/cele:전전컴채팅/cbot:봇제작방채팅/ctoast:개인방채팅/cja:자생방채팅
var T = require("ThreadManager.js");

//봇제작방용 변수
var flagbot = [0, 0]; //flag[0]=메뉴추가flag flag[1]=음식점추가flag
var menuagreebot = 0; //메뉴추가동의 인원수
var resagreebot = 0; //음식점추가동의 인원수
var flagmenubot; //추가심사중인 메뉴
var flagresbot; //추가심사중인 음식점
var sendermenubot = []; //메뉴추가에 동의한 사람
var senderresbot = []; //음식점추가에 동의한 사람

//전전컴톡방용 변수
var flagele = [0, 0]; //flag[0]=메뉴추가flag flag[1]=음식점추가flag
var menuagreeele = 0; //메뉴추가동의 인원수
var resagreeele = 0; //음식점추가동의 인원수
var flagmenuele; //추가심사중인 메뉴
var flagresele; //추가심사중인 음식점
var sendermenuele = []; //메뉴추가에 동의한 사람
var senderresele = []; //음식점추가에 동의한 사람

//개인방용 변수
var flagtoast = [0, 0]; //flag[0]=메뉴추가flag flag[1]=음식점추가flag
var menuagreetoast = 0; //메뉴추가동의 인원수
var resagreetoast = 0; //음식점추가동의 인원수
var flagmenutoast; //추가심사중인 메뉴
var flagrestoast; //추가심사중인 음식점
var sendermenutoast = []; //메뉴추가에 동의한 사람
var senderrestoast = []; //음식점추가에 동의한 사람

//자생방용 변수
var flagja = [0, 0]; //flag[0]=메뉴추가flag flag[1]=음식점추가flag
var menuagreeja = 0; //메뉴추가동의 인원수
var resagreeja = 0; //음식점추가동의 인원수
var flagmenuja; //추가심사중인 메뉴
var flagresja; //추가심사중인 음식점
var sendermenuja = []; //메뉴추가에 동의한 사람
var senderresja = []; //음식점추가에 동의한 사람
//------------------------------------------------------기능함수---------------------------------------------------------//

//로또
function lotto(r) {
    var templotto = []; //로또번호 6개가 담길 array
    for (var i = 0; i < 30; i++) { //30회정도 하면 되지 않을까
        var rad = Math.floor(1 + Math.random() * 45); //rad : 1~45중에 뽑히는 숫자
        if (templotto.indexOf(rad) == -1) {//중복이면 거른다
            templotto.push(rad);
        }
        if (templotto.length == 6) {//6개면 for 탈출
            break;
        }
    }
    r.replier.reply(templotto.sort(compare).join(", "));
}

//오버워치
function overWatch(r) {
    var name = r.msg.substr(6);//배틀태그가 담기는 공간
    name1 = name.replace("#", "-");
    var source = Utils.getWebText("https://playoverwatch.com/ko-kr/career/pc/" + name1);
    if (source.indexOf("u-align-center h5") == -1) {
        replier.reply(name + "의 점수를 알 수 없습니다.");
    } else {
        var score = source.split("u-align-center h5\">")[1].split("<")[0].trim();
        var tier = source.split("rank-icons/rank-")[1].split("Tier.")[0];
        var most = source.split("u-max-width-container career-section")[3];
        var most1 = most.split("<div class=\"ProgressBar-title\">")[1].split("<")[0].trim();
        var most2 = most.split("<div class=\"ProgressBar-title\">")[2].split("<")[0].trim();
        var most3 = most.split("<div class=\"ProgressBar-title\">")[3].split("<")[0].trim();
        r.replier.reply(name + "\nTier : " + tier + "\nScore : " + score + "\n--------------\n경쟁전 모스트 영웅\n1. " + most1 + "\n2. " + most2 + "\n3. " + most3);
    }
}

//리스트에서 추천하기(1개 or 여러개)
function recom(r, name) { //name : 리스트 이름
    var num = r.msg.split(" ")[1]; //num : 추천받고 싶은개수
    var list = D.selectForArray(name);
    if (num == undefined) {
        var rad = Math.floor(Math.random() * list.length);
        r.replier.reply(list[rad]);
    }
    if (0 < num && num < 9) {//추천할 메뉴가 1개 or 9개이상일때(1개만 return)
        var templist = list.slice(); //list의 복사본을 만든다.
        var listmul = []; //listmul : 랜덤으로 뽑힐 메뉴들이 담기는 공간
        for (var i = 0; i < num; i++) {
            var rad = Math.floor(Math.random() * templist.length);//rad : 뽑힌 메뉴
            listmul.push(templist.splice(rad, 1));//rad 번째 메뉴가 뽑혀서 listmul에 담김
        }
        r.replier.reply(listmul.join(", "));
    }
}

//리스트에 추가하기
function add(r, name, name1, num) { // name : DB 이름 / num : flag number
    var temp = r.msg.split(" ")[1];
    var list = D.selectForArray(name);
    if (D.selectForArray(name, null, "name=?", [temp]).length == 0) {
        D.insert('recom' + name, { name: temp })
        r.replier.reply(temp + "(이)가 건의되었습니다.");
        if (this["flag" + r.room][num] == 1) {
            r.replier.reply("진행중인 합의가 있습니다. 건의만 됩니다.");
        }
        if (this["flag" + r.room][num] == 0) {
            r.replier.reply("4명 이상이 메뉴동의를 입력하면 즉시 추가됩니다.");
            this["flag" + name + r.room] = temp;
            this["flag" + r.room][num] = 1;
        }
    } else {
        r.replier.reply(temp + "(은)는 이미있는 "+name1+"입니다.");
    }
}

//리스트 추가 다수 동의
function agree(r, name, name1, num) { // list : seed / name : DB 이름("menu", "res"...) / name1 : list의 한글이름("메뉴", "음식점"..) / num : flag number
    list = D.selectForArray(name);
    if (r.msg == name1 + "동의") {
        if (this["sender" + name + r.room].indexOf(r.sender) == -1) {
            this[name + "agree" + r.room] += 1;
            r.replier.reply(this[name + "agree" + r.room] + "/4");
            this["sender" + name + r.room].push(r.sender);
        }
    }
    if (this[name + "agree" + r.room] == 4) {
        var temp = this["flag" + name + r.room];
        D.insert(name, { name: temp });
        r.replier.reply(name1 + "에 " + this["flag" + name + r.room] + "(이)가 추가되었습니다.");
        clear(r, name, num);
    }
}

//메뉴추가 초기화함수
function clear(r, name, num) {
    this["flag" + r.room][num] = 0;
    this["sender" + name + r.room] = undefined;
    this["flag" + name + r.room] = undefined;
    this[name + "agree" + r.room] = 0;
}

//최근채팅
function recentchat(r, name) { //name : DB이름
    var tempchat = D.selectForArray(name);
    var num = r.msg.split(" ")[1];//num : 최근채팅 보고싶은 개수
    if (0 < num && num < 17) {
        var temp = [];//뽑은 채팅을 담을 공간
        for (var i = tempchat.length - num - 1 ; i < tempchat.length - 1; i++) {
            temp.push(tempchat[i].join(" : "));//불러온 파일에서 채팅 옮겨담기
        }
        r.replier.reply(temp.join("\n"));
    } else {
        var temp = [];//뽑은 채팅을 담을 공간
        for (var i = tempchat.length - 7; i < tempchat.length - 1; i++) {
            temp.push(tempchat[i].join(" : "));//불러온 파일에서 채팅 옮겨담기
        }
        r.replier.reply(temp.join("\n"));
    }
}
//--------------------------------------------------------------------소스코드-------------------------------------------------//
function response(room, msg, sender, isGroupChat, replier, imageDB) {
    //인자
    r = { replier: replier, msg: msg, sender: sender, room: room };

    if (msg.indexOf("시발") >= 0 || msg.indexOf("씨발") >= 0 || msg.indexOf("개새") >= 0 || msg.indexOf("병신") >= 0 || msg.indexOf("좆") >= 0) {
        replier.reply("욕은 안좋아");
    }

    //기능
    if (msg == "!기능") {
        replier.reply("!로또\n!최근채팅\n!메뉴추천\n!메뉴추가\n!음식점추천\n!음식점추가\n!오버워치\n설명이 필요하면 !기능 오버워치 처럼 입력하세요.");
    }

    //기능설명
    if (msg.indexOf("!기능 ") == 0) {
        func(r);
    }

    //로또
    if (msg.indexOf("!로또") == 0) {
        lotto(r);
    }

    //오버워치
    if (msg.indexOf("!오버워치") == 0) {
        overWatch(r);
    }

    //메뉴추천
    if (msg.indexOf("!메뉴추천") == 0) {
        recom(r, "menu");
    }

    //음식점추천
    if (msg.indexOf("!음식점추천") == 0) {
        recom(r, "res");
    }
    //각 방별 기능
    //-----------------------------------------------전전컴톡방--------------------------------------
    if (room == "ele") {

        //채팅저장
        if (msg.indexOf("!") == 0 || msg.indexOf("/") == 0 || sender == "시립봇" || sender == "파이봇") {
        } else {
            D.insert('cele', { name: sender, msg: msg });
        }

        //최근채팅
        if (msg.indexOf("!최근채팅") == 0) {
            recentchat(r, 'cele');
        }
        //--------------------------메뉴-------------------------------//
        //메뉴추가
        if (msg.indexOf("!메뉴추가 ") == 0) {
            add(r, "menu", "메뉴", 0);
        }

        //메뉴동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "menu", "메뉴", 0);
        }
        //---------------------------음식점-----------------------------//
        //음식점추가
        if (msg.indexOf("!음식점추가 ") == 0) {
            add(r, "res", "음식점", 1);
        }

        //음식점동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "res", "음식점", 1);
        }
        //---------------------------------------------------------------//
    }
    //-----------------------------------------------------개인채팅방----------------------------------------------
    if (room == "toast") {
        //채팅저장
        D.insert('ctoast', { name: sender, msg: msg });

        //최근채팅
        if (msg.indexOf("!최근채팅") == 0) {
            recentchat(r, 'ctoast');
        }

        //eval
        if (msg.indexOf(">") == 0) {
            replier.reply(eval(msg.substring(1)));
        }
        //--------------------------메뉴-------------------------------//
        //메뉴추가
        if (msg.indexOf("!메뉴추가 ") == 0) {
            add(r, "menu", "메뉴", 0);
        }

        //메뉴동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "menu", "메뉴", 0);
        }
        //---------------------------음식점-----------------------------//
        //음식점추가
        if (msg.indexOf("!음식점추가 ") == 0) {
            add(r, "res", "음식점", 1);
        }

        //음식점동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "res", "음식점", 1);
        }
        //---------------------------------------------------------------//
    }
    //-----------------------------------------시립대 봇제작방-----------------------------------------------------

    if (room == "bot") {

        //채팅저장
        if (msg.indexOf("!") == 0 || msg.indexOf("/") == 0 || sender == "시립봇" || sender == "파이봇") {
        } else {
            D.insert('cele', { name: sender, msg: msg });
        }

        //최근채팅
        if (msg.indexOf("!최근채팅") == 0) {
            recentchat(r, 'cbot');
        }

        //eval
        if (msg.indexOf(">") == 0) {
            replier.reply(eval(msg.substring(1)));
        }
        //--------------------------메뉴-------------------------------//
        //메뉴추가
        if (msg.indexOf("!메뉴추가 ") == 0) {
            add(r, "menu", "메뉴", 0);
        }

        //메뉴동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "menu", "메뉴", 0);
        }
        //---------------------------음식점-----------------------------//
        //음식점추가
        if (msg.indexOf("!음식점추가 ") == 0) {
            add(r, "res", "음식점", 1);
        }

        //음식점동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "res", "음식점", 1);
        }
        //---------------------------------------------------------------//
    }
    //------------------------자생방-----------------------------------
    if (room == "ja") {

        //채팅저장
        if (msg.indexOf("!") == 0 || msg.indexOf("/") == 0 || sender == "시립봇" || sender == "파이봇") {
        } else {
            D.insert('cja', { name: sender, msg: msg });
        }

        //최근채팅
        if (msg.indexOf("!최근채팅") == 0) {
            recentchat(r, 'cja');
        }
        //--------------------------메뉴-------------------------------//
        //메뉴추가
        if (msg.indexOf("!메뉴추가 ") == 0) {
            add(r, "menu", "메뉴", 0);
        }

        //메뉴동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "menu", "메뉴", 0);
        }
        //---------------------------음식점-----------------------------//
        //음식점추가
        if (msg.indexOf("!음식점추가 ") == 0) {
            add(r, "res", "음식점", 1);
        }

        //음식점동의합의
        if (this["flag" + room][0] == 1) {
            agree(r, "res", "음식점", 1);
        }
    }
}
